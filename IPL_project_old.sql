CREATE DATABASE DB_DE;
CREATE SCHEMA SC_DE;
CREATE OR REPLACE FILE FORMAT my_csv_format
  TYPE = 'CSV'
  FIELD_OPTIONALLY_ENCLOSED_BY = '"';

  CREATE STORAGE INTEGRATION SF_NG_ST
  TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = 'S3'
  ENABLED = TRUE
  STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::259666401492:role/SF_NG_MADDY'
  STORAGE_ALLOWED_LOCATIONS = ('s3://snowflake--external-table/')

  CREATE STAGE SF_NG_ES
  STORAGE_INTEGRATION = SF_NG_ST
  URL = 's3://snowflake--external-table/'
  FILE_FORMAT = my_csv_format;

-- CREATE OR REPLACE PIPE SF_NG_PIPE
-- AS
-- COPY INTO DB_DE.SC_DE.SF_NG_DE_TA1
-- FROM @DB_DE.SC_DE.SF_NG_ES/IPL_Data/
-- FILE_FORMAT = my_csv_format
-- ON_ERROR = 'CONTINUE'; --- This when we refresh the pipe, it automatically load the data.

CREATE OR REPLACE PIPE SF_NG_PIPE
AUTO_INGEST = TRUE
AS
COPY INTO DB_DE.SC_DE.SF_NG_DE_TA1
FROM @DB_DE.SC_DE.SF_NG_ES/IPL_Data/
FILE_FORMAT = my_csv_format
ON_ERROR = 'CONTINUE';

select system$pipe_status('SF_NG_PIPE');

alter pipe SF_NG_PIPE refresh;

SHOW PIPES;

DESC PIPE SF_NG_PIPE;

drop pipe SF_NG_PIPE;

SELECT * FROM SF_NG_DE_TA1;

DROP TABLE SF_NG_DE_TA1;
  
CREATE TABLE SF_NG_DE_TA1
(
match_id VARCHAR(200),
season VARCHAR(200),
start_date VARCHAR(200),
venue VARCHAR(200),
innings VARCHAR(200),
ball FLOAT(16),
batting_team VARCHAR(200),
bowling_team VARCHAR(200),
striker VARCHAR(200),
non_striker VARCHAR(200),
bowler VARCHAR(200),
runs_off_bat VARCHAR(200),
extras VARCHAR(200),
wides VARCHAR(200),
noballs VARCHAR(200),
byes VARCHAR(200),
legbyes VARCHAR(200),
penalty VARCHAR(200),
wicket_type VARCHAR(200),
player_dismissed VARCHAR(200),
other_wicket_type VARCHAR(200),
other_player_dismissed VARCHAR(200),
cricsheet_id VARCHAR(200)
);
============================================================================================
CREATE OR REPLACE STREAM STREAM_DE ON TABLE SF_NG_DE_TA1;
SHOW STREAMS LIKE 'STREAM_DE' IN SCHEMA DB_DE.SC_DE;
SELECT * FROM DB_DE.SC_DE.STREAM_DE;
DROP STREAM STREAM_DE;
============================================================================================
-- CREATE OR REPLACE TASK SF_NG_TASK
--   WAREHOUSE = COMPUTE_WH
--   SCHEDULE = 'USING CRON */5 * * * * UTC' -- This runs the task every 5 minutes
-- AS
-- COPY INTO DB_DE.SC_DE.SF_NG_DE_TA1
--   FROM @SF_NG_ES/IPL_Data/
--   FILE_FORMAT = (TYPE = 'CSV' FIELD_OPTIONALLY_ENCLOSED_BY = '"' SKIP_HEADER = 1)
--   PATTERN = '.*.csv';

-- ALTER TASK SF_NG_TASK SUSPEND;

-- EXECUTE TASK SF_NG_TASK;

-- DROP TASK SF_NG_TASK;

============================================================================================

CREATE SCHEMA SC_DE_STAGING;

SHOW TASKS IN SCHEMA SC_DE_STAGING;
DROP TASK SF_NG_TASK_STG;
ALTER TASK SF_NG_TASK_STG RESUME;
DROP TABLE SF_STG_TA1;

SELECT * FROM SF_STG_TA1;

CREATE OR ALTER TABLE SF_STG_TA1
  (
dub_value STRING,
match_id VARCHAR(200),
season VARCHAR(200),
start_date VARCHAR(200),
venue VARCHAR(200),
innings VARCHAR(200),
over VARCHAR(200),
ball FLOAT(16),
batting_team VARCHAR(200),
bowling_team VARCHAR(200),
striker VARCHAR(200),
non_striker VARCHAR(200),
bowler VARCHAR(200),
runs_off_bat VARCHAR(200),
extras VARCHAR(200),
wides VARCHAR(200),
noballs VARCHAR(200),
byes VARCHAR(200),
legbyes VARCHAR(200),
penalty VARCHAR(200),
wicket_type VARCHAR(200),
player_dismissed VARCHAR(200),
cricsheet_id VARCHAR(200)
  );

-- SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY())
-- WHERE NAME = 'SF_NG_TASK_STG'
-- ORDER BY SCHEDULED_TIME DESC;

-- SHOW TABLES LIKE 'SF_NG_TA1' IN SCHEMA "DB_DE"."SC_DE";

-- GRANT USAGE ON DATABASE "DB_DE" TO ROLE ACCOUNTADMIN;
-- GRANT USAGE ON SCHEMA "DB_DE"."SC_DE" TO ROLE ACCOUNTADMIN;
-- GRANT SELECT ON TABLE "DB_DE"."SC_DE"."SF_NG_TA1" TO ROLE ACCOUNTADMIN;
-- GRANT INSERT ON TABLE "DB_DE"."SC_DE_STAGING"."SF_STG_TA1" TO ROLE ACCOUNTADMIN;

DESC TASK SF_NG_TASK_STG;

DROP TASK SF_NG_TASK_STG;

ALTER TASK SF_NG_TASK_STG RESUME;

CREATE TASK SF_NG_TASK_STG
WAREHOUSE = COMPUTE_WH
WHEN system$stream_has_data('DB_DE.SC_DE.STREAM_DE')
AS
MERGE INTO "DB_DE"."SC_DE_STAGING"."SF_STG_TA1" AS target
USING (
    SELECT 
    CONCAT(match_id, innings, ball) AS dub_value,
    match_id,
    CASE 
        WHEN season = '2007/08' THEN '2008'
        WHEN season = '2009/10' THEN '2010'
        WHEN season = '2020/21' THEN '2020'
        ELSE season
    END AS season,
      CASE 
        WHEN TRY_TO_DATE(start_date, 'MM/DD/YYYY') IS NOT NULL 
        THEN TO_CHAR(TO_DATE(start_date, 'MM/DD/YYYY'), 'DD-MM-YYYY')
        WHEN TRY_TO_DATE(start_date, 'DD-MM-YYYY') IS NOT NULL 
        THEN TO_CHAR(TO_DATE(start_date, 'DD-MM-YYYY'), 'DD-MM-YYYY')
        ELSE start_date
        END AS start_date,
    CASE
        WHEN venue LIKE '%Jaitley%' THEN 'Arun Jaitley Stadium, Delhi'
        WHEN venue LIKE '%Brabourne%' THEN 'Brabourne Stadium, Mumbai'
        WHEN venue LIKE '%DY Patil%' THEN 'Dr DY Patil Sports Academy, Mumbai'
        WHEN venue LIKE '%Eden Gardens%' THEN 'Eden Gardens, Kolkata'
        WHEN venue LIKE '%Himachal Pradesh%' THEN 'Himachal Pradesh Cricket Association Stadium, Dharamsala'
        WHEN venue LIKE '%Chinnaswamy%' THEN 'M Chinnaswamy Stadium, Bengaluru'
        WHEN venue LIKE '%Chidambaram%' THEN 'MA Chidambaram Stadium, Chepauk, Chennai'
        WHEN venue LIKE '%Maharashtra Cricket%' THEN 'Maharashtra Cricket Association Stadium, Pune'
        WHEN venue LIKE '%Punjab Cricket%' THEN 'Punjab Cricket Association IS Bindra Stadium, Mohali, Chandigarh'
        WHEN venue LIKE '%Rajiv Gandhi%' THEN 'Rajiv Gandhi International Stadium, Uppal, Hyderabad'
        WHEN venue LIKE '%Wankhede%' THEN 'Wankhede Stadium, Mumbai'
        ELSE venue
    END AS venue,
    innings,
    CASE 
        WHEN CAST(ball AS FLOAT) BETWEEN 0.1 AND 0.9 THEN '1st'
        WHEN CAST(ball AS FLOAT) BETWEEN 1.1 AND 1.9 THEN '2nd'
        WHEN CAST(ball AS FLOAT) BETWEEN 2.1 AND 2.8 THEN '3rd'
        WHEN CAST(ball AS FLOAT) BETWEEN 3.1 AND 3.8 THEN '4th'
        WHEN CAST(ball AS FLOAT) BETWEEN 4.1 AND 4.8 THEN '5th'
        WHEN CAST(ball AS FLOAT) BETWEEN 5.1 AND 5.9 THEN '6th'
        WHEN CAST(ball AS FLOAT) BETWEEN 6.1 AND 6.9 THEN '7th'
        WHEN CAST(ball AS FLOAT) BETWEEN 7.1 AND 7.8 THEN '8th'
        WHEN CAST(ball AS FLOAT) BETWEEN 8.1 AND 8.8 THEN '9th'
        WHEN CAST(ball AS FLOAT) BETWEEN 9.1 AND 9.7 THEN '10th'
        WHEN CAST(ball AS FLOAT) BETWEEN 10.1 AND 10.9 THEN '11th'
        WHEN CAST(ball AS FLOAT) BETWEEN 11.1 AND 11.9 THEN '12th'
        WHEN CAST(ball AS FLOAT) BETWEEN 12.1 AND 12.8 THEN '13th'
        WHEN CAST(ball AS FLOAT) BETWEEN 13.1 AND 13.8 THEN '14th'
        WHEN CAST(ball AS FLOAT) BETWEEN 14.1 AND 14.7 THEN '15th'
        WHEN CAST(ball AS FLOAT) BETWEEN 15.1 AND 15.7 THEN '16th'
        WHEN CAST(ball AS FLOAT) BETWEEN 16.1 AND 16.9 THEN '17th'
        WHEN CAST(ball AS FLOAT) BETWEEN 17.1 AND 17.8 THEN '18th'
        WHEN CAST(ball AS FLOAT) BETWEEN 18.1 AND 18.9 THEN '19th'
        WHEN CAST(ball AS FLOAT) BETWEEN 19.1 AND 19.9 THEN '20th'
        ELSE CAST(ball AS STRING)
    END AS over,
    ball,
    batting_team,
    bowling_team,
    striker,
    non_striker,
    bowler,
    runs_off_bat,
    extras,
    wides,
    noballs,
    byes,
    legbyes,
    penalty,
    wicket_type,
    player_dismissed,
    cricsheet_id,
    ROW_NUMBER() OVER (PARTITION BY match_id, innings, ball ORDER BY match_id) AS row_num
    FROM "DB_DE"."SC_DE"."SF_NG_DE_TA1"
    QUALIFY row_num = 1
) AS source
ON target.dub_value = source.dub_value
WHEN MATCHED THEN 
    -- Do nothing or update existing row
    UPDATE SET target.season = source.season,
               target.start_date = source.start_date,
               target.venue = source.venue,
               target.innings = source.innings,
               target.over = source.over,
               target.ball = source.ball,
               target.batting_team = source.batting_team,
               target.bowling_team = source.bowling_team,
               target.striker = source.striker,
               target.non_striker = source.non_striker,
               target.bowler = source.bowler,
               target.runs_off_bat = source.runs_off_bat,
               target.extras = source.extras,
               target.wides = source.wides,
               target.noballs = source.noballs,
               target.byes = source.byes,
               target.legbyes = source.legbyes,
               target.penalty = source.penalty,
               target.wicket_type = source.wicket_type,
               target.player_dismissed = source.player_dismissed,
               target.cricsheet_id = source.cricsheet_id
WHEN NOT MATCHED THEN
    INSERT (dub_value, match_id, season, start_date, venue, innings, over, ball, batting_team, bowling_team, striker, non_striker, bowler, runs_off_bat, extras, wides, noballs, byes, legbyes, penalty, wicket_type, player_dismissed, cricsheet_id)
    VALUES (source.dub_value, source.match_id, source.season, source.start_date, source.venue, source.innings, source.over, source.ball, source.batting_team, source.bowling_team, source.striker, source.non_striker, source.bowler, source.runs_off_bat, source.extras, source.wides, source.noballs, source.byes, source.legbyes, source.penalty, source.wicket_type, source.player_dismissed, source.cricsheet_id);

ALTER TASK SF_NG_TASK_STG RESUME;
======================================================================================

CREATE OR REPLACE STREAM DB_DE.SC_DE_STAGING.STREAM_STG ON TABLE SF_STG_TA1;
SHOW STREAMS LIKE 'STREAM_STG' IN SCHEMA DB_DE.SC_DE_STAGING;
SELECT * from DB_DE.SC_DE_STAGING.STREAM_STG;

DROP STREAM STREAM_STG;

======================================================================================
CREATE SCHEMA SC_DE_PRESENT;
SHOW TABLES IN SCHEMA SC_DE_PRESENT;
SHOW TASKS IN SCHEMA SC_DE_PRESENT;

drop table SF_PRE_PLAYER_DIM;
drop table SF_PRE_SEASON_DIM;
drop table SF_PRE_START_DATE_DIM;
drop table SF_PRE_TEAMS_DIM;
drop table SF_PRE_VENUE_DIM;
drop table SF_PRE_WICKET_TYPE_DIM;

DROP TASK SF_NG_TASK_PRE_01;
DROP TASK SF_NG_TASK_PRE_02;
DROP TASK SF_NG_TASK_PRE_03;
DROP TASK SF_NG_TASK_PRE_04;
DROP TASK SF_NG_TASK_PRE_05;
DROP TASK SF_NG_TASK_PRE_06;

ALTER TASK SF_NG_TASK_PRE_01 SUSPEND;
ALTER TASK SF_NG_TASK_PRE_01 RESUME;
ALTER TASK SF_NG_TASK_PRE_02 RESUME;
ALTER TASK SF_NG_TASK_PRE_03 RESUME;
ALTER TASK SF_NG_TASK_PRE_04 RESUME;
ALTER TASK SF_NG_TASK_PRE_05 RESUME;
ALTER TASK SF_NG_TASK_PRE_06 RESUME;

ALTER TASK SF_NG_TASK_PRE_01 SUSPEND;

CREATE OR ALTER TABLE SF_PRE_SEASON_DIM
(
SEASON_ID INT AUTOINCREMENT PRIMARY KEY,
SEASON VARCHAR(200)
);

CREATE TASK SF_NG_TASK_PRE_01
WAREHOUSE = COMPUTE_WH
WHEN system$stream_has_data('DB_DE.SC_DE_STAGING.STREAM_STG')
AS
MERGE INTO "DB_DE"."SC_DE_PRESENT"."SF_PRE_SEASON_DIM" AS target
USING (
    SELECT DISTINCT SEASON 
    FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1"
    ) AS source
ON target.SEASON = source.SEASON
WHEN MATCHED THEN
    UPDATE SET target.SEASON = source.SEASON
WHEN NOT MATCHED THEN
    INSERT (SEASON)
    VALUES (source.SEASON);

DROP TASK SF_NG_TASK_PRE_02;
DROP TABLE  SF_PRE_VENUE_DIM;
DESC TASK SF_NG_TASK_PRE_02;
ALTER TASK SF_NG_TASK_PRE_02 RESUME;
ALTER TASK SF_NG_TASK_PRE_02 SUSPEND;

SELECT * FROM SF_PRE_VENUE_DIM;

CREATE OR ALTER TABLE SF_PRE_VENUE_DIM
(
VENUE_ID INT AUTOINCREMENT PRIMARY KEY,
VENUE VARCHAR(200)
);

CREATE TASK SF_NG_TASK_PRE_02
WAREHOUSE = COMPUTE_WH
AFTER SF_NG_TASK_PRE_01
AS
MERGE INTO "DB_DE"."SC_DE_PRESENT"."SF_PRE_VENUE_DIM" AS target
USING (
    SELECT DISTINCT VENUE 
    FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1"
    ) AS source
ON target.VENUE = source.VENUE
WHEN MATCHED THEN
    UPDATE SET target.VENUE = source.VENUE
WHEN NOT MATCHED THEN
    INSERT (VENUE)
    VALUES (source.VENUE);

DROP TABLE SF_PRE_START_DATE_DIM;
DROP TASK SF_NG_TASK_PRE_03;
DESC TASK SF_NG_TASK_PRE_01;
ALTER TASK SF_NG_TASK_PRE_03 RESUME;
ALTER TASK SF_NG_TASK_PRE_02 SUSPEND;

SELECT * FROM SF_PRE_START_DATE_DIM;

CREATE OR ALTER TABLE SF_PRE_START_DATE_DIM
(
START_DATE_ID INT AUTOINCREMENT PRIMARY KEY,
START_DATE VARCHAR(200)
);

CREATE TASK SF_NG_TASK_PRE_03
WAREHOUSE = COMPUTE_WH
AFTER SF_NG_TASK_PRE_02
AS
MERGE INTO "DB_DE"."SC_DE_PRESENT"."SF_PRE_START_DATE_DIM" AS target
USING (
    SELECT DISTINCT START_DATE 
    FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1"
    ) AS source
ON target.START_DATE = source.START_DATE
WHEN MATCHED THEN
    UPDATE SET target.START_DATE = source.START_DATE
WHEN NOT MATCHED THEN
    INSERT (START_DATE)
    VALUES (source.START_DATE);

DROP TABLE SF_PRE_TEAMS_DIM;
DROP TASK SF_NG_TASK_PRE_04;
DESC TASK SF_NG_TASK_PRE_04;
ALTER TASK SF_NG_TASK_PRE_04 RESUME;
ALTER TASK SF_NG_TASK_PRE_02 SUSPEND;

CREATE OR ALTER TABLE SF_PRE_TEAMS_DIM
(
TEAMS_ID INT AUTOINCREMENT PRIMARY KEY, 
TEAMS VARCHAR(200)
);

SELECT * FROM SF_PRE_TEAMS_DIM;

CREATE TASK SF_NG_TASK_PRE_04
WAREHOUSE = COMPUTE_WH
AFTER SF_NG_TASK_PRE_03
AS
MERGE INTO "DB_DE"."SC_DE_PRESENT"."SF_PRE_TEAMS_DIM" AS target
USING
(
SELECT batting_team AS TEAMS FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1"
UNION
SELECT bowling_team AS TEAMS FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1"
) AS source
ON target.TEAMS = source.TEAMS
WHEN MATCHED THEN
    UPDATE SET target.TEAMS = source.TEAMS
WHEN NOT MATCHED THEN
    INSERT (TEAMS)
    VALUES (source.TEAMS);

DROP TABLE SF_PRE_WICKET_TYPE_DIM;
DROP TASK SF_NG_TASK_PRE_04;

DROP TABLE SF_PRE_START_DATE_DIM;
DROP TASK SF_NG_TASK_PRE_05;
DESC TASK SF_NG_TASK_PRE_01;
ALTER TASK SF_NG_TASK_PRE_05 RESUME;
ALTER TASK SF_NG_TASK_PRE_02 SUSPEND;

SELECT * FROM SF_PRE_WICKET_TYPE_DIM;

CREATE OR ALTER TABLE SF_PRE_WICKET_TYPE_DIM
(
WICKET_TYPE_ID INT AUTOINCREMENT PRIMARY KEY,
WICKET_TYPE VARCHAR(200)
);

CREATE TASK SF_NG_TASK_PRE_05
WAREHOUSE = COMPUTE_WH
AFTER SF_NG_TASK_PRE_04
AS
MERGE INTO "DB_DE"."SC_DE_PRESENT"."SF_PRE_WICKET_TYPE_DIM" AS target
USING (
    SELECT DISTINCT WICKET_TYPE 
    FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1"
    ) AS source
ON target.WICKET_TYPE = source.WICKET_TYPE
WHEN MATCHED THEN
    UPDATE SET target.WICKET_TYPE = source.WICKET_TYPE
WHEN NOT MATCHED THEN
    INSERT (WICKET_TYPE)
    VALUES (source.WICKET_TYPE);

DROP TABLE SF_PRE_PLAYER_DIM;
DROP TASK SF_NG_TASK_PRE_06;
DESC TASK SF_NG_TASK_PRE_01;
ALTER TASK SF_NG_TASK_PRE_06 RESUME;
ALTER TASK SF_NG_TASK_PRE_02 SUSPEND;

CREATE OR ALTER TABLE SF_PRE_PLAYER_DIM
(
PLAYER_ID INT AUTOINCREMENT PRIMARY KEY,
PLAYER VARCHAR(200)
);

SELECT * FROM SF_PRE_PLAYER_DIM;

CREATE TASK SF_NG_TASK_PRE_06
WAREHOUSE = COMPUTE_WH
AFTER SF_NG_TASK_PRE_05
AS
MERGE INTO "DB_DE"."SC_DE_PRESENT"."SF_PRE_PLAYER_DIM" AS target
USING (
    SELECT striker AS PLAYER FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1"
    UNION
    SELECT non_striker AS PLAYER FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1"
    UNION
    SELECT bowler AS PLAYER FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1"
    UNION
    SELECT player_dismissed AS PLAYER FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1"
) AS source
ON target.PLAYER = source.PLAYER
WHEN MATCHED THEN
    UPDATE SET target.PLAYER = source.PLAYER
WHEN NOT MATCHED THEN
    INSERT (PLAYER)
    VALUES (source.PLAYER);

======================================================================================

CREATE OR REPLACE STREAM DB_DE.SC_DE_PRESENT.STREAM_PRE ON TABLE "DB_DE"."SC_DE_PRESENT"."SF_PRE_PLAYER_DIM";
SHOW STREAMS LIKE 'STREAM_PRE' IN SCHEMA DB_DE.SC_DE;
SELECT * FROM STREAM_PRE;
DROP STREAM STREAM_PRE;
======================================================================================

-- CREATE OR ALTER TABLE SF_PRE_PLAYER_DISMISSED_DIM
-- (
-- PLAYER_DISMISSED_ID INT AUTOINCREMENT PRIMARY KEY,
-- PLAYER_DISMISSED VARCHAR(200)
-- );

-- INSERT INTO "DB_DE"."SC_DE_PRESENT"."SF_PRE_PLAYER_DISMISSED_DIM" (PLAYER_DISMISSED) 
-- SELECT DISTINCT PLAYER_DISMISSED
-- FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1";

-- DROP TABLE SF_PRE_PLAYER_DISMISSED_DIM;

-- SHOW TABLES IN SCHEMA SC_DE_CONS;

-- SELECT * FROM SF_PRE_PLAYER_DIM;

-- CREATE OR ALTER TABLE SF_PRE_BOWLER_DIM
-- (
-- BOWLER_ID INT AUTOINCREMENT PRIMARY KEY,
-- BOWLER VARCHAR(200)
-- );

-- DROP TABLE SF_PRE_BOWLER_DIM;

-- INSERT INTO "DB_DE"."SC_DE_PRESENT"."SF_PRE_BOWLER_DIM" (BOWLER) 
-- SELECT DISTINCT BOWLER
-- FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1";

-- CREATE OR ALTER TABLE SF_PRE_BATTING_TEAM_DIM
-- (
-- BATTING_TEAM_ID INT AUTOINCREMENT PRIMARY KEY,
-- BATTING_TEAM VARCHAR(200)
-- );

-- DROP TABLE SF_PRE_BATTING_TEAM_DIM;

-- INSERT INTO "DB_DE"."SC_DE_PRESENT"."SF_PRE_BATTING_TEAM_DIM" (BATTING_TEAM) 
-- SELECT DISTINCT BATTING_TEAM
-- FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1";

-- CREATE OR ALTER TABLE SF_PRE_BOWLING_TEAM_DIM
-- (
-- BOWLING_TEAM_ID INT AUTOINCREMENT PRIMARY KEY,
-- BOWLING_TEAM VARCHAR(200)
-- );

-- INSERT INTO "DB_DE"."SC_DE_PRESENT"."SF_PRE_BOWLING_TEAM_DIM" (BOWLING_TEAM) 
-- SELECT DISTINCT BOWLING_TEAM
-- FROM "DB_DE"."SC_DE_STAGING"."SF_STG_TA1";

CREATE SCHEMA SC_DE_CONS

SELECT * FROM SF_CONS_DELIVERY_FACT;

show tables in schema db_de.sc_de_cons;
show TASKS in schema db_de.sc_de_cons;

DROP TABLE SF_CONS_DELIVERY_FACT;
DROP TABLE SF_PRE_BATSMAN_FACT;
DROP TABLE SF_PRE_BOWLER_FACT;

DROP TASK SF_NG_TASK_CONS_01;
DROP TASK SF_NG_TASK_CONS_02;
DROP TASK SF_NG_TASK_CONS_03;

ALTER TASK SF_NG_TASK_CONS_01 RESUME;
ALTER TASK SF_NG_TASK_CONS_02 RESUME;
ALTER TASK SF_NG_TASK_CONS_03 RESUME;
ALTER TASK SF_NG_TASK_CONS_01 SUSPEND;

DROP TASK SF_CONS_DELIVERY_FACT;

CREATE TABLE SF_CONS_DELIVERY_FACT
(
dub_value STRING,
MATCH_ID VARCHAR(200),
SEASON_ID INT,
START_DATE_ID INT,
VENUE_ID INT,
INNINGS VARCHAR(200),
OVER VARCHAR(200),
BALL FLOAT(16),
BATTING_TEAM_ID INT,
BOWLING_TEAM_ID INT,
BATSMAN_ID INT,
NON_STRIKER_BATSMAN_ID INT,
BOWLER_ID INT,
RUNS VARCHAR(200),
EXTRAS VARCHAR(200),
WIDES VARCHAR(200),
NOBALLS VARCHAR(200),
BYES VARCHAR(200),
LEGBYES VARCHAR(200),
PENALTY VARCHAR(200),
WICKET_TYPE_ID INT,
PLAYER_DISMISSED_ID INT,
CRICSHEET_ID VARCHAR(200),
CONSTRAINT fk_season FOREIGN KEY (SEASON_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_SEASON_DIM (SEASON_ID),
CONSTRAINT fk_venue FOREIGN KEY (VENUE_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_VENUE_DIM (VENUE_ID),
CONSTRAINT fk_start_date FOREIGN KEY (START_DATE_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_START_DATE_DIM (START_DATE_ID),
CONSTRAINT fk_batting_team FOREIGN KEY (BATTING_TEAM_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_TEAMS_DIM (TEAMS_ID),
CONSTRAINT fk_bowling_team FOREIGN KEY (BOWLING_TEAM_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_TEAMS_DIM (TEAMS_ID),
CONSTRAINT fk_wicket_type FOREIGN KEY (WICKET_TYPE_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_WICKET_TYPE_DIM (WICKET_TYPE_ID),
CONSTRAINT fk_batsman FOREIGN KEY (BATSMAN_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_PLAYER_DIM (PLAYER_ID),
CONSTRAINT fk_non_striker FOREIGN KEY (NON_STRIKER_BATSMAN_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_PLAYER_DIM (PLAYER_ID),
CONSTRAINT fk_bowler FOREIGN KEY (BOWLER_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_PLAYER_DIM (PLAYER_ID),
CONSTRAINT fk_player_dismissed FOREIGN KEY (PLAYER_DISMISSED_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_PLAYER_DIM (PLAYER_ID)
);

DROP TABLE SF_CONS_DELIVERY_FACT;
DROP TASK SF_NG_TASK_CONS_01;

CREATE TASK SF_NG_TASK_CONS_01
WAREHOUSE = COMPUTE_WH
WHEN system$stream_has_data('DB_DE.SC_DE_PRESENT.STREAM_PRE')
AS
MERGE INTO "DB_DE"."SC_DE_CONS"."SF_CONS_DELIVERY_FACT" AS target
USING
(SELECT p.MATCH_ID,
        si.SEASON_ID,
        sd.START_DATE_ID,
        vd.VENUE_ID,
        p.INNINGS,
        p.OVER,
        p.BALL,
        ba.TEAMS_ID AS BATTING_TEAM_ID,
        bo.TEAMS_ID AS BOWLING_TEAM_ID,
        pb.PLAYER_ID AS BATSMAN_ID,
        pn.PLAYER_ID AS NON_STRIKER_BATSMAN_ID,
        po.PLAYER_ID AS BOWLER_ID,
        p.runs_off_bat AS RUNS,
        p.EXTRAS,
        p.WIDES,
        p.NOBALLS,
        p.BYES,
        p.LEGBYES,
        p.PENALTY,
        wt.WICKET_TYPE_ID,
        pw.PLAYER_ID AS PLAYER_DISMISSED_ID,
        p.CRICSHEET_ID,
        CONCAT(p.MATCH_ID, p.INNINGS, p.BALL) AS dub_value
    FROM 
        "DB_DE"."SC_DE_STAGING"."SF_STG_TA1" p
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_SEASON_DIM" si ON p.SEASON = si.SEASON
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_VENUE_DIM" vd ON p.VENUE = vd.VENUE
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_START_DATE_DIM" sd ON p.START_DATE = sd.START_DATE
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_TEAMS_DIM" ba ON p.BATTING_TEAM = ba.TEAMS
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_TEAMS_DIM" bo ON p.BOWLING_TEAM = bo.TEAMS
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_PLAYER_DIM" pb ON p.STRIKER = pb.PLAYER
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_PLAYER_DIM" po ON p.BOWLER = po.PLAYER
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_PLAYER_DIM" pn ON p.NON_STRIKER = pn.PLAYER
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_WICKET_TYPE_DIM" wt ON p.WICKET_TYPE = wt.WICKET_TYPE
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_PLAYER_DIM" pw ON p.PLAYER_DISMISSED = pw.PLAYER
) AS source
ON target.dub_value = source.dub_value
WHEN MATCHED THEN
    UPDATE SET
    target.MATCH_ID = source.MATCH_ID,target.SEASON_ID = source.SEASON_ID,target.START_DATE_ID = source.START_DATE_ID,target.VENUE_ID = source.VENUE_ID,target.INNINGS = source.INNINGS,target.OVER = source.OVER,target.BALL = source.BALL,target.BATTING_TEAM_ID = source.BATTING_TEAM_ID,target.BOWLING_TEAM_ID = source.BOWLING_TEAM_ID,target.BATSMAN_ID = source.BATSMAN_ID,target.NON_STRIKER_BATSMAN_ID = source.NON_STRIKER_BATSMAN_ID,target.BOWLER_ID = source.BOWLER_ID,target.RUNS = source.RUNS,target.EXTRAS = source.EXTRAS,target.WIDES = source.WIDES,target.NOBALLS = source.NOBALLS,target.BYES = source.BYES,target.LEGBYES = source.LEGBYES,target.PENALTY = source.PENALTY,target.WICKET_TYPE_ID = source.WICKET_TYPE_ID,target.PLAYER_DISMISSED_ID = source.PLAYER_DISMISSED_ID,target.CRICSHEET_ID = source.CRICSHEET_ID
WHEN NOT MATCHED THEN
    INSERT (dub_value, MATCH_ID, SEASON_ID, START_DATE_ID, VENUE_ID, INNINGS, OVER, BALL, BATTING_TEAM_ID, BOWLING_TEAM_ID, BATSMAN_ID, NON_STRIKER_BATSMAN_ID, BOWLER_ID, RUNS, EXTRAS, WIDES, NOBALLS, BYES, LEGBYES, PENALTY, WICKET_TYPE_ID, PLAYER_DISMISSED_ID, CRICSHEET_ID)
    VALUES (source.dub_value, source.MATCH_ID, source.SEASON_ID, source.START_DATE_ID, source.VENUE_ID,source.INNINGS, source.OVER, source.BALL, source.BATTING_TEAM_ID,source.BOWLING_TEAM_ID, source.BATSMAN_ID, source.NON_STRIKER_BATSMAN_ID, source.BOWLER_ID, source.RUNS, source.EXTRAS, source.WIDES, source.NOBALLS,  source.BYES, source.LEGBYES, source.PENALTY, source.WICKET_TYPE_ID, source.PLAYER_DISMISSED_ID, source.CRICSHEET_ID);

CREATE OR ALTER TABLE SF_PRE_BATSMAN_FACT
(dub_value STRING,
MATCH_ID VARCHAR(200),
SEASON_ID INT,
START_DATE_ID INT,
BATTING_TEAM_ID INT,
BATSMAN_ID INT,
RUNS INT,
BOWLING_TEAM_ID INT,
CONSTRAINT fk_start_date FOREIGN KEY (START_DATE_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_START_DATE_DIM (START_DATE_ID),
CONSTRAINT fk_season FOREIGN KEY (SEASON_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_SEASON_DIM (SEASON_ID),
CONSTRAINT fk_batting_team FOREIGN KEY (BATTING_TEAM_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_TEAMS_DIM (TEAMS_ID),
CONSTRAINT fk_batsman FOREIGN KEY (BATSMAN_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_PLAYER_DIM (PLAYER_ID),
CONSTRAINT fk_bowling_team FOREIGN KEY (BOWLING_TEAM_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_TEAMS_DIM (TEAMS_ID)
);

SELECT * FROM SF_PRE_BATSMAN_FACT;

DROP TABLE SF_PRE_BATSMAN_FACT;
DROP TASK SF_NG_TASK_CONS_02;
ALTER TASK SF_NG_TASK_CONS_01 RESUME;

CREATE TASK SF_NG_TASK_CONS_02
WAREHOUSE = COMPUTE_WH
AFTER SF_NG_TASK_CONS_01 
AS
MERGE INTO "DB_DE"."SC_DE_CONS"."SF_PRE_BATSMAN_FACT" AS target
USING
(SELECT 
    CONCAT (b,match_id,si.SEASON_ID,sd.START_DATE_ID,ba.BATTING_TEAM_ID,bo.BOWLING_TEAM_ID) AS dub_value,
    b.MATCH_ID,
    si.SEASON_ID,
    sd.START_DATE_ID,
    ba.TEAMS_ID AS BATTING_TEAM_ID,
    pb.PLAYER_ID AS BATSMAN_ID,
    SUM(b.runs_off_bat) AS RUNS,
    bo.TEAMS_ID AS BOWLING_TEAM_ID
FROM
    "DB_DE"."SC_DE_STAGING"."SF_STG_TA1" b
LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_SEASON_DIM" si ON b.SEASON = si.SEASON
LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_START_DATE_DIM" sd ON b.START_DATE = sd.START_DATE
LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_TEAMS_DIM" ba ON b.BATTING_TEAM = ba.TEAMS
LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_TEAMS_DIM" bo ON b.BOWLING_TEAM = bo.TEAMS
LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_PLAYER_DIM" pb ON b.STRIKER = pb.PLAYER
GROUP BY 
    b.MATCH_ID, 
    si.SEASON_ID, 
    sd.START_DATE_ID, 
    ba.TEAMS_ID, 
    pb.PLAYER_ID, 
    bo.TEAMS_ID
) AS source
ON target.dub_value = source.dub_value
WHEN MATCHED THEN
    UPDATE SET
    target.MATCH_ID = source.MATCH_ID,target.SEASON_ID = source.SEASON_ID,target.START_DATE_ID = source.START_DATE_ID,target.BATTING_TEAM_ID = source.BATTING_TEAM_ID,target.BOWLING_TEAM_ID = source.BOWLING_TEAM_ID
    WHEN NOT MATCHED THEN
     INSERT
    (dub_value, MATCH_ID, SEASON_ID, START_DATE_ID, BATTING_TEAM_ID, BOWLING_TEAM_ID, BATSMAN_ID, RUNS)
    VALUES
    (source.dub_value, source.MATCH_ID, source.SEASON_ID, source.START_DATE_ID, source.BATTING_TEAM_ID, source.BOWLING_TEAM_ID, source.BATSMAN_ID, source.RUNS);

DROP TABLE SF_PRE_BOWLER_FACT;
    
CREATE OR ALTER TABLE SF_PRE_BOWLER_FACT
(
dub_value STRING,
MATCH_ID VARCHAR(200),
SEASON_ID INT,
START_DATE_ID INT,
BOWLING_TEAM_ID INT,
BOWLER_ID INT,
WICKETS INT,
EXTRAS INT,
BATTING_TEAM_ID INT,
PLAYER_DISMISSED_ID INT,
WICKET_TYPE_ID INT,
CONSTRAINT fk_start_date FOREIGN KEY (START_DATE_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_START_DATE_DIM (START_DATE_ID),
CONSTRAINT fk_season FOREIGN KEY (SEASON_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_SEASON_DIM (SEASON_ID),
CONSTRAINT fk_batting_team FOREIGN KEY (BATTING_TEAM_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_TEAMS_DIM (TEAMS_ID),
CONSTRAINT fk_bowler FOREIGN KEY (BOWLER_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_PLAYER_DIM (PLAYER_ID),
CONSTRAINT fk_wicket_type FOREIGN KEY (WICKET_TYPE_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_WICKET_TYPE_DIM (WICKET_TYPE_ID),
CONSTRAINT fk_player_dismissed FOREIGN KEY (PLAYER_DISMISSED_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_PLAYER_DIM (PLAYER_ID),
CONSTRAINT fk_bowling_team FOREIGN KEY (BOWLING_TEAM_ID) REFERENCES DB_DE.SC_DE_PRESENT.SF_PRE_TEAMS_DIM (TEAMS_ID)
);

DROP TABLE SF_PRE_BOWLER_FACT;
DROP TASK SF_NG_TASK_CONS_03;

CREATE TASK SF_NG_TASK_CONS_03
WAREHOUSE = COMPUTE_WH
AFTER SF_NG_TASK_CONS_02
AS
MERGE INTO "DB_DE"."SC_DE_CONS"."SF_PRE_BOWLER_FACT" AS target
USING
(
    SELECT 
        CONCAT(b.MATCH_ID, si.SEASON_ID, sd.START_DATE_ID, ba.TEAMS_ID, bo.TEAMS_ID, pb.PLAYER_ID) AS dub_value,
        b.MATCH_ID,
        si.SEASON_ID,
        sd.START_DATE_ID,
        bo.TEAMS_ID AS BOWLING_TEAM_ID,
        pb.PLAYER_ID AS BOWLER_ID,
        ba.TEAMS_ID AS BATTING_TEAM_ID,
        COUNT(b.WICKET_TYPE) AS WICKETS,
        b.EXTRAS,
        pw.PLAYER_ID AS PLAYER_DISMISSED_ID
    FROM
        "DB_DE"."SC_DE_STAGING"."SF_STG_TA1" b
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_SEASON_DIM" si ON b.SEASON = si.SEASON
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_START_DATE_DIM" sd ON b.START_DATE = sd.START_DATE
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_TEAMS_DIM" ba ON b.BATTING_TEAM = ba.TEAMS
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_TEAMS_DIM" bo ON b.BOWLING_TEAM = bo.TEAMS
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_PLAYER_DIM" pb ON b.BOWLER = pb.PLAYER
    LEFT JOIN "DB_DE"."SC_DE_PRESENT"."SF_PRE_PLAYER_DIM" pw ON b.PLAYER_DISMISSED = pw.PLAYER
    GROUP BY 
        b.MATCH_ID, 
        si.SEASON_ID, 
        sd.START_DATE_ID,
        bo.TEAMS_ID,
        pb.PLAYER_ID,
        ba.TEAMS_ID,
        pw.PLAYER_ID,
        b.EXTRAS
) AS source
ON target.dub_value = source.dub_value
WHEN MATCHED THEN
    UPDATE SET
        target.MATCH_ID = source.MATCH_ID,
        target.SEASON_ID = source.SEASON_ID,
        target.START_DATE_ID = source.START_DATE_ID,
        target.BATTING_TEAM_ID = source.BATTING_TEAM_ID,
        target.BOWLING_TEAM_ID = source.BOWLING_TEAM_ID,
        target.BOWLER_ID = source.BOWLER_ID,
        target.WICKETS = source.WICKETS,
        target.EXTRAS = source.EXTRAS,
        target.PLAYER_DISMISSED_ID = source.PLAYER_DISMISSED_ID
WHEN NOT MATCHED THEN
    INSERT
    (dub_value, MATCH_ID, SEASON_ID, START_DATE_ID, BATTING_TEAM_ID, BOWLING_TEAM_ID, BOWLER_ID, WICKETS, EXTRAS, PLAYER_DISMISSED_ID)
    VALUES
    (source.dub_value, source.MATCH_ID, source.SEASON_ID, source.START_DATE_ID, source.BATTING_TEAM_ID, source.BOWLING_TEAM_ID, source.BOWLER_ID, source.WICKETS, source.EXTRAS, source.PLAYER_DISMISSED_ID);

SELECT * FROM SF_PRE_BOWLER_FACT 
WHERE BOWLER_ID = 108;
